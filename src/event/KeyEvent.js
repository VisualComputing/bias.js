import Event, {NO_MODIFIER_MASK} from '../Event';
import KeyShorcut from '../KeyShorcut';

/**
 * A key-event is an {@link Event} specialization that
 * encapsulates a {@link KeyShortcut}. Key shortcuts may be
 * of one form out of two: 1. A single Character; or, 2. A modifier mask (such as: (ALT |
 * SHIFT)) plus a virtual-key.
 * <p>
 * <b>Note</b> that virtual key codes are used to report which keys have been
 * pressed, rather than a character generated by the combination of one or more keystrokes
 * (such as "A", which comes from shift and "a"). Their values depend on the platform your
 * running your code. In Java, for instance, have a look at
 * <a href= "http://docs.oracle.com/javase/7/docs/api/java/awt/event/KeyEvent.html">
 * KeyEvent</a> to get some VK_* values. Note that Proscene sets them automatically from
 * the platform where the framework is running.
 */
class KeyEvent extends Event {

  /**
   * Constructs a keyevent with <b>c</b> defining its
   * {@link KeyShortcut}.
   */
  constructor (props) {
    if(props.char){
      super();
      this._key = props.char;
    }
    if(props.modifiers && props.vk){
      super(props.modifiers, props.vk);
      this._key = '\0';
    }
    if(props.vk && !props.modifiers){
      super(vk);
      this._vk = '\0';
    }
    if(props.other) {
      super(props.other);
      this._key = props.other.key();
    }
  }


  get() {
    return new KeyEvent(this);
  }

  shortcut() {
    if (this._key == '\0')
      return new KeyShortcut(this.modifiers(), this.id());
    else
      return new KeyShortcut(this.key());
  }

  key() {
    return this._key;
  }
}
